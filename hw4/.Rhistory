knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(dplyr)
library(ggplot2)
library(ggfortify)
library(readr)
library(readr)
cherry_trees <- read_csv("cherry_trees.csv")
# View(cherry_trees)
library(readr)
cherry_trees <- read_csv("cherry_trees.csv")
View(cherry_trees)
mode(cherry_trees)   # Show the data type
names(cherry_trees)   # Show column names
head(cherry_trees)   # Show first 6 rows of data
dim(cherry_trees)   # Show number of rows and columns
str(cherry_trees)   # Show structure of data set
tail(cherry_trees)   # Show last 6 rows of data
glimpse(cherry_trees)   # Shows a horizontal view of the data
tbl_df(cherry_trees)  # Shows a vertical view of the data
mode(cherry_trees)   # Show the data type
# names(cherry_trees)   # Show column names
# head(cherry_trees)   # Show first 6 rows of data
# dim(cherry_trees)   # Show number of rows and columns
# str(cherry_trees)   # Show structure of data set
# tail(cherry_trees)   # Show last 6 rows of data
# glimpse(cherry_trees)   # Shows a horizontal view of the data
# tbl_df(cherry_trees)  # Shows a vertical view of the data
mode(cherry_trees)   # Show the data type
names(cherry_trees)   # Show column names
head(cherry_trees)   # Show first 6 rows of data
dim(cherry_trees)   # Show number of rows and columns
str(cherry_trees)   # Show structure of data set
tail(cherry_trees)   # Show last 6 rows of data
glimpse(cherry_trees)   # Shows a horizontal view of the data
tbl_df(cherry_trees)  # Shows a vertical view of the data
cherry_trees
bin <- 50   # Set the number of bins
bw <- 2   # Set the binwidth
print(Height_histogram <-
ggplot(data = cherry_trees, aes(x=Treeheight)) +
geom_histogram(bins = bin, binwidth = bw) +
scale_x_continuous(name = "Tree Height (ft)"))
bin = 50  # Set the number of bins
bw = 2    # Set the binwidth
n_obs <- sum(!is.na(cherry_trees$Treeheight))  # Find the number of observations
n_obs
Height_histogram <-
ggplot(data = cherry_trees, aes(x=Treeheight)) +
geom_histogram(aes(y = ..density..), binwidth = bw) +
stat_function(fun = dnorm, args = list(mean = mean(cherry_trees$Treeheight),
sd = sd(cherry_trees$Treeheight)),color="red") +
scale_x_continuous(name = "Tree Height (ft)")
Height_histogram    # Print the modified histogram
cherry_trees.mean()
mean(cherry_trees.TreeHeight)
mean(cherry_trees)
mean(cherry_trees('Tree Height'))
mean(cherry_trees['Tree Height'])
cherry_trees
cherry_trees['Treeheight']
mean(cherry_trees['Treeheight'])
height <- c(cherry_trees['Treeheight'])
mean(height)
summary(height)
summary(cherry_trees$Treeheight)
mean(cherry_trees$Treeheight)
summary(cherry_trees$Treeheight)
```{r}
summary(cherry_trees$Treeheight)
mean(cherry_trees$Treeheight)
summary(cherry_trees$Treeheight)
bin = 50  # Set the number of bins
bw = 2    # Set the binwidth
n_obs <- sum(!is.na(cherry_trees$Treeheight))  # Find the number of observations
n_obs
Height_histogram <-
ggplot(data = cherry_trees, aes(x=Treeheight)) +
geom_histogram(aes(y = ..density..), binwidth = bw) +
stat_function(fun = dnorm, args = list(mean = mean(cherry_trees$Treeheight),
sd = sd(cherry_trees$Treeheight)),color="red") +
scale_x_continuous(name = "Tree Height (ft)")
Height_histogram    # Print the modified histogram
print( Height_Boxplot <- ggplot(cherry_trees, aes(y=Treeheight)) +
geom_boxplot() +
ylab("Treeheight (ft)") +
theme_bw())
is_outlier <- function(x) {
return(x < quantile(x,0.25) - 1.5 * IQR(x) |
x > quantile(x, 0.75) + 1.5 * IQR(x))
}
Input <- cherry_trees$Treeheight
print(outlier <- is_outlier(Input))
print(outlier <- as.numeric(is_outlier(Input)))
?as.numeric
Indivdual_Num <- which(Input >= 91 | Input <= 60)
# Locate the position in data set of any potential outliers.
?which()
which(is_outlier(Input))
cherry_trees[c(which(is_outlier(Input))),]
#  Get help.
?qqnorm()
qqnorm(Input, main="Q-Q Plot for Tammy's Cherry Tree Data",
xlab="Theoretical Normal Quantitles",
ylab="Sample Data Qunatiles")
qqline(Input,col = "red")
#  Plot the Q-Q plot and the histogram together.
qqnorm(Input, main="Q-Q Plot for Tammy's Cherry Tree Data",
xlab="Theoretical Normal Quantitles",
ylab="Sample Data Qunatiles")
qqline(Input,col = "red")
Height_histogram    # Print the modified histogram
sumData <- cherry_trees %>%
summarise(
countHT = n(),   # Number of trees
meanHT = mean(Treeheight),   # Mean
medianHt = median(Treeheight),   # Median
varHT = var(Treeheight),   # Variance
sdevHT = sd(Treeheight),   # Standard deviation
semHT = sd(Treeheight)/sqrt(n()),   # Standard error of the mean (SEM)
# Alternative SEM if there are missing values
sem_altHT = sd(Treeheight)/sqrt(sum(!is.na(Treeheight))),
iqrHT = IQR(Treeheight),   # Interquartile range
quant_25_HT = quantile(Treeheight, 0.25),   # First quartile
quant_50_HT = quantile(Treeheight, 0.50),   # The median
quant_75_HT = quantile(Treeheight, 0.75),   # Third quartile
minHT = min(Treeheight),  # Minimum
maxHT = max(Treeheight))   # Maximum
sumData <- cherry_trees %>%
summarise(
countHT = n(),   # Number of trees
meanHT = mean(Treeheight),   # Mean
medianHt = median(Treeheight),   # Median
varHT = var(Treeheight),   # Variance
sdevHT = sd(Treeheight),   # Standard deviation
semHT = sd(Treeheight)/sqrt(n()),   # Standard error of the mean (SEM)
# Alternative SEM if there are missing values
sem_altHT = sd(Treeheight)/sqrt(sum(!is.na(Treeheight))),
iqrHT = IQR(Treeheight),   # Interquartile range
quant_25_HT = quantile(Treeheight, 0.25),   # First quartile
quant_50_HT = quantile(Treeheight, 0.50),   # The median
quant_75_HT = quantile(Treeheight, 0.75),   # Third quartile
minHT = min(Treeheight),  # Minimum
maxHT = max(Treeheight))   # Maximum
sumData <- cherry_trees %>%
summarise(
countHT = n(),   # Number of trees
meanHT = mean(Treeheight),   # Mean
medianHt = median(Treeheight),   # Median
varHT = var(Treeheight),   # Variance
sdevHT = sd(Treeheight),   # Standard deviation
semHT = sd(Treeheight)/sqrt(n()),   # Standard error of the mean (SEM)
# Alternative SEM if there are missing values
sem_altHT = sd(Treeheight)/sqrt(sum(!is.na(Treeheight))),
iqrHT = IQR(Treeheight),   # Interquartile range
quant_25_HT = quantile(Treeheight, 0.25),   # First quartile
quant_50_HT = quantile(Treeheight, 0.50),   # The median
quant_75_HT = quantile(Treeheight, 0.75),   # Third quartile
minHT = min(Treeheight),  # Minimum
maxHT = max(Treeheight))   # Maximum
print(meanHT)
sumData <- cherry_trees %>%
summarise(
countHT = n(),   # Number of trees
meanHT = mean(Treeheight),   # Mean
medianHt = median(Treeheight),   # Median
varHT = var(Treeheight),   # Variance
sdevHT = sd(Treeheight),   # Standard deviation
semHT = sd(Treeheight)/sqrt(n()),   # Standard error of the mean (SEM)
# Alternative SEM if there are missing values
sem_altHT = sd(Treeheight)/sqrt(sum(!is.na(Treeheight))),
iqrHT = IQR(Treeheight),   # Interquartile range
quant_25_HT = quantile(Treeheight, 0.25),   # First quartile
quant_50_HT = quantile(Treeheight, 0.50),   # The median
quant_75_HT = quantile(Treeheight, 0.75),   # Third quartile
minHT = min(Treeheight),  # Minimum
maxHT = max(Treeheight))   # Maximum
sumData
Input <- cherry_trees$treehight
mean(Input)
sd(Input)
length(Input)
Input <- cherry_trees$Treehight
mean(Input)
sd(Input)
length(Input)
SEM <- sd / sqrt(length)
sd
Input <- cherry_trees$Treehight
mean = mean(Input)
sd = sd(Input)
n = length(Input)
Input <- cherry_trees$Treeheight
mean = mean(Input)
sd = sd(Input)
n = length(Input)
sd
SEM = sd / sqrt(n)
Alpha95 = 0.05
DOF = n - 1
#  Get help on "qt()"
?qt()
qt(Alpha95/2, DOF)
qt(Input, DOF, Alpha95/2 )
print(qt(Alpha95/2, DOF))
t.test(Input, conf.level=0.95)
print(qt(.95/2, DOF))
print(qt(.05/2, DOF))
print(qt(.05/2, DOF))
print(qt(Alpha95/2, DOF))
Alpha95 = 0.05
print(Alpha95)
print(qt(Alpha95, DOF))
print(qt(Alpha95, DOF))
print(qt(Alpha95/2, DOF))
print(qt(.95/2, DOF))
print(qt(Alpha95/2, DOF))
library(glue)
LowerCI_95 = mean - qt(Alpha95/2, DOF)
UpperCI_95 = mean + qt(Alpha95/2, DOF)
glue()
glue('[, {LowerCI_95}, {UpperCI_95}]')
library(glue)
LowerCI_95 = mean - qt(Alpha95/2, DOF)
UpperCI_95 = mean + qt(Alpha95/2, DOF)
glue('[{LowerCI_95}, {UpperCI_95}]')
library(glue)
LowerCI_95 = mean + qt(Alpha95/2, DOF)
UpperCI_95 = mean - qt(Alpha95/2, DOF)
glue('[{LowerCI_95}, {UpperCI_95}]')
print(t.test(Input, conf.level=0.80))
print(t.test(Input, conf.level=0.90))
print(t.test(Input, conf.level=0.99))
print(t.test(Input, conf.level=0.80))
print(t.test(Input, conf.level=0.90))
print(t.test(Input, conf.level=0.95))
print(t.test(Input, conf.level=0.99))
